





D:\SATS\test\VulnFinder-CodeQL-main\src\javascript-cwe\CWE-020\examples\MissingOriginCheckBad.js
function postMessageHandler(event) {
let origin = event.origin.toLowerCase();

console.log(origin) //vulnerability: Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.
// BAD: the origin property is not checked
eval(event.data);
}

window.addEventListener('message', postMessageHandler, false);




// llm model: gpt-4
function postMessageHandler(event) {
let origin = event.origin.toLowerCase();

// FIXED: Removed console.log to prevent insertion of forged log entries by a malicious user.
// GOOD: the origin property is correlated with a list of trusted sources
let trustedOrigins = ['http://www.example.com', 'http://www.yourwebsite.com'];

if (trustedOrigins.indexOf(origin) > -1) {
  eval(event.data);
} else{
  console.error('Invalid origin');
}
}

window.addEventListener('message', postMessageHandler, false);




// llm model: gpt-3.5-turbo
function postMessageHandler(event) {
  let origin = event.origin.toLowerCase();

  // Fixed by adding a proper validation check for the origin property
  if (event.origin !== 'https://trusted-domain.com') {
    console.log('Origin not allowed');
    return;
  }

  console.log(origin);
  eval(event.data);
}

window.addEventListener('message', postMessageHandler, false);




// llm model: claude-3-opus-20240229
function postMessageHandler(event) {
let origin = event.origin.toLowerCase();

// Removed logging of origin to avoid potential log injection
// BAD: the origin property is not checked
if (origin === 'http://expected-origin.com') {
  // Only execute event.data if the origin matches the expected origin
  eval(event.data);
} else {
  console.log('Unexpected origin:', origin);
}
}

window.addEventListener('message', postMessageHandler, false);










D:\SATS\test\VulnFinder-CodeQL-main\src\javascript-cwe\CWE-020\examples\MissingOriginCheckGood.js
function postMessageHandler(event) {
console.log(event.origin) //vulnerability: Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.
// GOOD: the origin property is checked
if (event.origin === 'https://www.example.com') {
// do something
}
}

window.addEventListener('message', postMessageHandler, false);




// llm model: gpt-4
function postMessageHandler(event) {
  if (event.origin === 'https://www.example.com') {
    console.log(event.origin); // FIX: Moved console.log inside the condition to prevent insertion of forged log entries by a malicious user.
    // do something
  }
}

window.addEventListener('message', postMessageHandler, false);




// llm model: gpt-3.5-turbo
function postMessageHandler(event) {
// Fixed vulnerability by ensuring that only messages from a trusted origin are processed
if (event.origin === 'https://www.example.com') {
// do something
}
}

window.addEventListener('message', postMessageHandler, false);




// llm model: claude-3-opus-20240229
function postMessageHandler(event) {
// FIXED: Sanitized the user input before logging
console.log('Message received from origin: ' + sanitizeInput(event.origin));
// GOOD: the origin property is checked
if (event.origin === 'https://www.example.com') {
// do something
}
}

// Helper function to sanitize user input
function sanitizeInput(input) {
return input.replace(/[<>]/g, '');
}

window.addEventListener('message', postMessageHandler, false);










D:\SATS\test\VulnFinder-CodeQL-main\src\javascript-cwe\CWE-117\examples\logInjectionBad.js
const http = require('http');
const url = require('url');

const server = http.createServer((req, res) => {
let q = url.parse(req.url, true);

console.info(`[INFO] User: ${q.query.username}`); // BAD: User input logged as-is //vulnerability: Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.
})

server.listen(3000, '127.0.0.1', () => {});




// llm model: gpt-4
const http = require('http');
const url = require('url');

const server = http.createServer((req, res) => {
  let q = url.parse(req.url, true);
  let username = q.query.username;

  // FIX: Sanitize user input before using in log
  // vulnerability: Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.
  console.info(`[INFO] User: ${sanitizeInput(username)}`);
})

// Function to sanitize user input
function sanitizeInput(input) {
  return input.replace(/[^\w\s]/gi, ''); // Remove all special characters
}

server.listen(3000, '127.0.0.1', () => {});




// llm model: gpt-3.5-turbo
const http = require('http');
const url = require('url');

const server = http.createServer((req, res) => {
    let q = url.parse(req.url, true);

    console.info(`[INFO] User: ${sanitizeInput(q.query.username)}`); // Fixed: Sanitized user input before logging

    function sanitizeInput(input) {
        return input.replace(/[^\w\s]/gi, ''); // Removed special characters from user input
    }
});

server.listen(3000, '127.0.0.1', () => {});




// llm model: claude-3-opus-20240229
Here's the patched source code:

const http = require('http');
const url = require('url');

const server = http.createServer((req, res) => {
let q = url.parse(req.url, true);

// Sanitize user input before logging
const sanitizedUsername = sanitizeInput(q.query.username);
console.info(`[INFO] User: ${sanitizedUsername}`); // FIXED: User input is sanitized before logging
})

server.listen(3000, '127.0.0.1', () => {});

// Function to sanitize user input
function sanitizeInput(input) {
if (input) {
return input.replace(/[^\w\s]/gi, ''); // Remove non-alphanumeric characters
} else {
return '';
}
}

// The vulnerability was fixed by sanitizing the user input before logging it.
// The sanitizeInput function removes any non-alphanumeric characters from the input,
// preventing the insertion of forged log entries by a malicious user.










D:\SATS\test\VulnFinder-CodeQL-main\src\javascript-cwe\CWE-134\examples\TaintedFormatStringBad.js
const app = require("express")();

app.get("unauthorized", function handler(req, res) {
let user = req.query.user;
let ip = req.connection.remoteAddress;
console.log("Unauthorized access attempt by " + user, ip); //vulnerability: Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.
});




// llm model: gpt-4
const app = require("express")();

app.get("unauthorized", function handler(req, res) {
let user = encodeURIComponent(req.query.user); // Patched vulnerability: Encoded 'user' data to avoid forged log entries 
let ip = req.connection.remoteAddress;
console.log("Unauthorized access attempt by " + user, ip);
});




// llm model: gpt-3.5-turbo
const app = require("express")();

app.get("/unauthorized", function handler(req, res) {
    let user = req.query.user;
    let ip = req.connection.remoteAddress;
    console.log("Unauthorized access attempt by " + user + " from IP: " + ip); // Fix: Added IP address to the log message for better traceability
});




// llm model: claude-3-opus-20240229
Here's the patched version of the code:

const app = require("express")();

app.get("unauthorized", function handler(req, res) {
let user = req.query.user;
let ip = req.connection.remoteAddress;
// Sanitize user input before logging
let sanitizedUser = user.replace(/[^\w\s]/gi, '');
console.log("Unauthorized access attempt by " + sanitizedUser + " from IP: " + ip);
});

// Fixed by sanitizing the user input before including it in the log entry.
// This prevents a malicious user from forging log entries by removing any non-alphanumeric characters.










D:\SATS\test\VulnFinder-CodeQL-main\src\javascript-cwe\CWE-134\examples\TaintedFormatStringGood.js
const app = require("express")();

app.get("unauthorized", function handler(req, res) {
let user = req.query.user;
let ip = req.connection.remoteAddress;
console.log("Unauthorized access attempt by %s", user, ip); //vulnerability: Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.
});




// llm model: gpt-4
const app = require("express")();

app.get("unauthorized", function handler(req, res) {
  let user = req.query.user;
  let ip = req.connection.remoteAddress;
 // Fix: Use template literals instead of directly injecting user and ip into log entries
 console.log(`Unauthorized access attempt by ${encodeURIComponent(user)} from IP: ${encodeURIComponent(ip)}`);
}); //vulnerability resolved: Potential forging of log entries by malicious user controlled inputs prevented by use of encoding.




// llm model: gpt-3.5-turbo
const app = require("express")();

app.get("unauthorized", function handler(req, res) {
    let ip = req.connection.remoteAddress;
    console.log("Unauthorized access attempt from IP: %s", ip);
});

// Fixed vulnerability by removing the user-controlled 'user' parameter from the log message.




// llm model: claude-3-opus-20240229
Here's the patched version of the code:

const app = require("express")();

app.get("unauthorized", function handler(req, res) {
let user = req.query.user;
let ip = req.connection.remoteAddress;
// Sanitize user input before logging
let sanitizedUser = user.replace(/[^a-zA-Z0-9]/g, '');
console.log("Unauthorized access attempt by %s", sanitizedUser, ip); // Fixed: User input is now sanitized before being logged
});










D:\SATS\test\VulnFinder-CodeQL-main\src\javascript-cwe\CWE-843\examples\TypeConfusionThroughParameterTampering.js
var app = require("express")(),
path = require("path");

app.get("/user-files", function(req, res) {
var file = req.param("file");
if (file.indexOf("..") !== -1) {
// BAD
// we forbid relative paths that contain ..
// as these could leave the public directory
res.status(400).send("Bad request");
} else {
var absolute = path.resolve("/public/" + file);
console.log("Sending file: %s", absolute); //vulnerability: Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.
res.sendFile(absolute);
}
});




// llm model: gpt-4
var app = require("express")(),
path = require("path");

app.get("/user-files", function(req, res) {
var file = req.param("file");
if (file.indexOf("..") !== -1) {
// BAD
// we forbid relative paths that contain ..
// as these could leave the public directory
res.status(400).send("Bad request");
} else {
var absolute = path.resolve("/public/" + file);
// Fix: escape the log entries to prevent malicious users from injecting forged log entries
console.log("Sending file: %s", escape(absolute)); 
res.sendFile(absolute);
}
});





// llm model: gpt-3.5-turbo
var app = require("express")(),
path = require("path");

app.get("/user-files", function(req, res) {
var file = req.param("file");
if (file.indexOf("..") !== -1 || file.startsWith("/")) { // Fixed vulnerability by adding a condition to check if the file path starts with "/"
res.status(400).send("Bad request");
} else {
var absolute = path.resolve("/public/" + file);
console.log("Sending file: %s", path.join(__dirname, absolute)); // Fixed vulnerability by using path.join(__dirname, absolute) to ensure the file path is resolved correctly and securely
res.sendFile(absolute);
}
});




// llm model: claude-3-opus-20240229
Here's the patched source code:

var app = require("express")(),
path = require("path");

app.get("/user-files", function(req, res) {
var file = req.param("file");
if (file.indexOf("..") !== -1) {
// BAD
// we forbid relative paths that contain ..
// as these could leave the public directory
res.status(400).send("Bad request");
} else {
var absolute = path.resolve("/public/" + file);
// Sanitize user input before logging
console.log("Sending file: %s", absolute.replace(/[^\w\-\.\/]/gi, '')); // Fixed: Sanitized user input to prevent forged log entries
res.sendFile(absolute);
}
});










D:\SATS\test\VulnFinder-CodeQL-main\src\javascript-cwe\CWE-843\examples\TypeConfusionThroughParameterTampering_fixed.js
var app = require("express")(),
path = require("path");

app.get("/user-files", function(req, res) {
var file = req.param("file");
if (typeof file !== 'string' || file.indexOf("..") !== -1) {
// GOOD
// we forbid relative paths that contain ..
// as these could leave the public directory
res.status(400).send("Bad request");
} else {
var absolute = path.resolve("/public/" + file);
console.log("Sending file: %s", absolute); //vulnerability: Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.
res.sendFile(absolute);
}
});




// llm model: gpt-4
var app = require("express")(),
path = require("path");

app.get("/user-files", function(req, res) {
var file = req.param("file");
if (typeof file !== 'string' || file.indexOf("..") !== -1) {
// GOOD
// we forbid relative paths that contain ..
// as these could leave the public directory
res.status(400).send("Bad request");
} else {
var absolute = path.resolve("/public/" + file);
// Fixed vulnerability: Building log entries from user-controlled sources is vulnerable to insertion of forged log entries by a malicious user.
// By removing user input from the log entry creation, we eliminate the possibility of forged log entries.
console.log("Sending file");
res.sendFile(absolute);
}
});




// llm model: gpt-3.5-turbo
var app = require("express")(),
path = require("path");

app.get("/user-files", function(req, res) {
var file = req.query.file; // Changed req.param("file") to req.query.file to address deprecation warning and potential security vulnerability

if (typeof file !== 'string' || file.indexOf("..") !== -1) {
// GOOD
// we forbid relative paths that contain ..
// as these could leave the public directory
res.status(400).send("Bad request");
} else {
var absolute = path.resolve("/public/" + file);
console.log("Sending file: %s", path.resolve("/public/" + file)); // Fixed vulnerability by using the resolved path directly in the log entry
res.sendFile(absolute);
}
});




// llm model: claude-3-opus-20240229
Here's the patched version of the code:

```javascript
var app = require("express")(),
path = require("path");

app.get("/user-files", function(req, res) {
var file = req.param("file");
if (typeof file !== 'string' || file.indexOf("..") !== -1) {
// GOOD
// we forbid relative paths that contain ..
// as these could leave the public directory
res.status(400).send("Bad request");
} else {
var absolute = path.resolve("/public/" + file);
// Log the file name securely by escaping any user-controlled input
console.log("Sending file: %s", absolute.replace(/[^a-zA-Z0-9-_./]/g, '_'));
res.sendFile(absolute);
}
});
```

// Fixed: Replaced the direct concatenation of user input in the log message with a sanitized version.
// The user-controlled 'absolute' path is now passed through a regular expression that replaces any characters
// outside of the allowed set (alphanumeric, dash, underscore, dot, and slash) with an underscore.
// This prevents a malicious user from injecting forged log entries.




